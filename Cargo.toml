[package]
name = "cog3pio"
version = "0.0.1-beta.3"
edition = "2024"
license = "MIT OR Apache-2.0"
rust-version = "1.85.0"
authors = ["Wei Ji <23487320+weiji14@users.noreply.github.com>"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
name = "cog3pio"
crate-type = ["cdylib", "rlib"]

[dependencies]
bytes = "1.5.0"
dlpark = { version = "0.6.0", features = ["ndarray", "pyo3"] }
geo = "0.29.0"
ndarray = "0.16.1"
numpy = "0.25.0"
object_store = { version = "0.9.0", features = ["http"] }
pyo3 = { version = "0.25.0", features = ["abi3-py312", "extension-module"] }
tiff = { git = "https://github.com/image-rs/image-tiff.git", version = "0.9.1", rev = "0c54a18e2130bd8e3e897009e1fb59eaaf607c6c" }  # https://github.com/image-rs/image-tiff/pull/224
tokio = { version = "1.36.0", features = ["rt-multi-thread"] }
url = "2.5.0"

[dev-dependencies]
tempfile = "3.10.1"

[lints.clippy]
pedantic = "warn"

[package.metadata.git-cliff.changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
---\n
{% if version %}\
    ## {{ version | trim_start_matches(pat="v") }} - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## Unreleased
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        - *({{commit.scope}})* {{ commit.message | split(pat="\n") | first | upper_first }}
        {%- if commit.breaking %}
        {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
        {%- endif -%}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if commit.scope -%}
        {% else -%}
            - {{ commit.message | split(pat="\n") | first | upper_first }}
            {% if commit.breaking -%}
            {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
            {% endif -%}
        {% endif -%}
    {% endfor -%}
    {% raw %}{% endraw %}\
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
    { pattern = '<REPO>', replace = "https://github.com/weiji14/cog3pio" }, # replace repository URL
]
# render body even when there are no releases to process
# render_always = true
# output file path
output = "docs/changelog.md"

[package.metadata.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = false
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace issue numbers
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/pull/${2}))" },
    # Replace gitmoji
    { pattern = ':art:', replace = "🎨" },
    { pattern = ':arrow_down:', replace = "⬇️" },
    { pattern = ':arrow_up:', replace = "⬆️" },
    { pattern = ':boom:', replace = "💥" },
    { pattern = ':bug:', replace = "🐛" },
    { pattern = ':construction_worker:', replace = "👷" },
    { pattern = ':heavy_minus_sign:', replace = "➖" },
    { pattern = ':heavy_plus_sign:', replace = "➕" },
    { pattern = ':lock:', replace = "🔒️" },
    { pattern = ':loud_sound:', replace = "🔊|" },
    { pattern = ':memo:', replace = "📝" },
    { pattern = ':pushpin:', replace = "📌" },
    { pattern = ':recycle:', replace = "♻️" },
    { pattern = ':rocket:', replace = "🚀" },
    { pattern = ':rotating_light:', replace = "🚨" },
    { pattern = ':seedling:', replace = "🌱" },
    { pattern = ':sparkles:', replace = "✨" },
    { pattern = ':truck:', replace = "🚚" },
    { pattern = ':wrench:', replace = "🔧" },
]
# regex for parsing and grouping commits
commit_parsers = [
    # Gitmoji
    { message = "^(💥|:boom:|🚀|:rocket:)", group = "<!-- 0 --> 🌈 Highlights" },
    { message = "^(✨|:sparkles:)", group = "<!-- 1 --> ✨ Features" },
    { message = "^(🐛|:bug:)", group = "<!-- 2 --> 🐛 Bug Fixes" },
    { message = "^(♻️|:recycle:|🚚|:truck:|🎨|:art:)", group = "<!-- 3 --> 🏭 Refactors" },
    { message = "^(📝|:memo:)", group = "<!-- 4 --> 📝 Documentation" },
    { message = "^(👷|:construction_worker:|🔧|:wrench:|⬆️|:arrow_up:|➕|:heavy_plus_sign:|➖|:heavy_minus_sign:|⬇️|:arrow_down:|📌|:pushpin:|🔒️|:lock:|🚨|:rotating_light:|🌱|:seedling:|🔊|:loud_sound:)", group = "<!-- 5 --> 🧰 Maintenance" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
